{"name":"\nDetach the Servo variable from its pin.  If all Servo variables are detached, then pins 9 and 10 can be used for PWM output with analogWrite().\n\n","description":"\nservo.detach()\n\n"}{"name":"\nRead the current angle of the servo (the value passed to the last call to write()).\n\n","description":"\nservo.read()\n\n","syntax":"\nservo: a variable of type Servo\n\n"}{"name":"\nWrites a value to the servo, controlling the shaft accordingly.  On a standard servo, this will set the angle of the shaft (in degrees), moving the shaft to that orientation.  On a continuous rotation servo, this will set the speed of the servo (with 0 being full-speed in one direction, 180 being full speed in the other, and a value near 90 being no movement).\n\n","description":"\nservo.write(angle)\n\n"}{"name":"\nCheck whether the Servo variable is attached to a pin.\n\n","description":"\nservo.attached()\n\n","syntax":"\nservo: a variable of type Servo\n\n"}{"name":"\nWrites a value in microseconds (uS) to the servo, controlling the shaft accordingly.  On a standard servo, this will set the angle of the shaft. On standard servos a parameter value of 1000 is fully counter-clockwise, 2000 is fully clockwise, and 1500 is in the middle.\n\nNote that some manufactures do not follow this standard very closely so that servos often respond to values between 700 and 2300. Feel free to increase these endpoints until the servo no longer continues to increase its range. Note however that attempting to drive a servo past its endpoints (often indicated by a growling sound) is a high-current state, and should be avoided.\n\nContinuous-rotation servos will respond to the writeMicrosecond function in an analogous manner to the write function.\n\n","description":"\nservo.writeMicroseconds(uS)\n\n"}{"name":"\nAttach the Servo variable to a pin.  Note that in Arduino 0016 and earlier, the Servo library supports only servos on only two pins: 9 and 10.\n\n","description":"\nservo.attach(pin) servo.attach(pin, min, max)\n\n"}{"name":"\nWrites a value in microseconds (uS) to the servo, controlling the shaft accordingly.  On a standard servo, this will set the angle of the shaft. On standard servos a parameter value of 1000 is fully counter-clockwise, 2000 is fully clockwise, and 1500 is in the middle.\n\nNote that some manufactures do not follow this standard very closely so that servos often respond to values between 700 and 2300. Feel free to increase these endpoints until the servo no longer continues to increase its range. Note however that attempting to drive a servo past its endpoints (often indicated by a growling sound) is a high-current state, and should be avoided.\n\nContinuous-rotation servos will respond to the writeMicrosecond function in an analogous manner to the write function.\n\n","description":"\nservo.writeMicroseconds(uS)\n\n"}{"name":"\nAttach the Servo variable to a pin.  Note that in Arduino 0016 and earlier, the Servo library supports only servos on only two pins: 9 and 10.\n\n","description":"\nservo.attach(pin) servo.attach(pin, min, max)\n\n"}{"name":"\nRead the current angle of the servo (the value passed to the last call to write()).\n\n","description":"\nservo.read()\n\n","syntax":"\nservo: a variable of type Servo\n\n"}{"name":"\nCheck whether the Servo variable is attached to a pin.\n\n","description":"\nservo.attached()\n\n","syntax":"\nservo: a variable of type Servo\n\n"}{"name":"\nDetach the Servo variable from its pin.  If all Servo variables are detached, then pins 9 and 10 can be used for PWM output with analogWrite().\n\n","description":"\nservo.detach()\n\n"}{"name":"\nWrites a value to the servo, controlling the shaft accordingly.  On a standard servo, this will set the angle of the shaft (in degrees), moving the shaft to that orientation.  On a continuous rotation servo, this will set the speed of the servo (with 0 being full-speed in one direction, 180 being full speed in the other, and a value near 90 being no movement).\n\n","description":"\nservo.write(angle)\n\n"}{"name":"\nWrites a value to the servo, controlling the shaft accordingly.  On a standard servo, this will set the angle of the shaft (in degrees), moving the shaft to that orientation.  On a continuous rotation servo, this will set the speed of the servo (with 0 being full-speed in one direction, 180 being full speed in the other, and a value near 90 being no movement).\n\n","description":"\nservo.write(angle)\n\n"}{"name":"\nDetach the Servo variable from its pin.  If all Servo variables are detached, then pins 9 and 10 can be used for PWM output with analogWrite().\n\n","description":"\nservo.detach()\n\n"}{"name":"\nWrites a value in microseconds (uS) to the servo, controlling the shaft accordingly.  On a standard servo, this will set the angle of the shaft. On standard servos a parameter value of 1000 is fully counter-clockwise, 2000 is fully clockwise, and 1500 is in the middle.\n\nNote that some manufactures do not follow this standard very closely so that servos often respond to values between 700 and 2300. Feel free to increase these endpoints until the servo no longer continues to increase its range. Note however that attempting to drive a servo past its endpoints (often indicated by a growling sound) is a high-current state, and should be avoided.\n\nContinuous-rotation servos will respond to the writeMicrosecond function in an analogous manner to the write function.\n\n","description":"\nservo.writeMicroseconds(uS)\n\n"}{"name":"\nAttach the Servo variable to a pin.  Note that in Arduino 0016 and earlier, the Servo library supports only servos on only two pins: 9 and 10.\n\n","description":"\nservo.attach(pin) servo.attach(pin, min, max)\n\n"}{"name":"\nRead the current angle of the servo (the value passed to the last call to write()).\n\n","description":"\nservo.read()\n\n","syntax":"\nservo: a variable of type Servo\n\n"}{"name":"\nCheck whether the Servo variable is attached to a pin.\n\n","description":"\nservo.attached()\n\n","syntax":"\nservo: a variable of type Servo\n\n"}{"name":"\nAttach the Servo variable to a pin.  Note that in Arduino 0016 and earlier, the Servo library supports only servos on only two pins: 9 and 10.\n\n","description":"\nservo.attach(pin) servo.attach(pin, min, max)\n\n"}{"name":"\nCheck whether the Servo variable is attached to a pin.\n\n","description":"\nservo.attached()\n\n","syntax":"\nservo: a variable of type Servo\n\n"}{"name":"\nRead the current angle of the servo (the value passed to the last call to write()).\n\n","description":"\nservo.read()\n\n","syntax":"\nservo: a variable of type Servo\n\n"}{"name":"\nWrites a value in microseconds (uS) to the servo, controlling the shaft accordingly.  On a standard servo, this will set the angle of the shaft. On standard servos a parameter value of 1000 is fully counter-clockwise, 2000 is fully clockwise, and 1500 is in the middle.\n\nNote that some manufactures do not follow this standard very closely so that servos often respond to values between 700 and 2300. Feel free to increase these endpoints until the servo no longer continues to increase its range. Note however that attempting to drive a servo past its endpoints (often indicated by a growling sound) is a high-current state, and should be avoided.\n\nContinuous-rotation servos will respond to the writeMicrosecond function in an analogous manner to the write function.\n\n","description":"\nservo.writeMicroseconds(uS)\n\n"}{"name":"\nDetach the Servo variable from its pin.  If all Servo variables are detached, then pins 9 and 10 can be used for PWM output with analogWrite().\n\n","description":"\nservo.detach()\n\n"}{"name":"\nWrites a value to the servo, controlling the shaft accordingly.  On a standard servo, this will set the angle of the shaft (in degrees), moving the shaft to that orientation.  On a continuous rotation servo, this will set the speed of the servo (with 0 being full-speed in one direction, 180 being full speed in the other, and a value near 90 being no movement).\n\n","description":"\nservo.write(angle)\n\n"}{"name":"\nAttach the Servo variable to a pin.  Note that in Arduino 0016 and earlier, the Servo library supports only servos on only two pins: 9 and 10.\n\n","description":"\nservo.attach(pin) servo.attach(pin, min, max)\n\n"}{"name":"\nWrites a value in microseconds (uS) to the servo, controlling the shaft accordingly.  On a standard servo, this will set the angle of the shaft. On standard servos a parameter value of 1000 is fully counter-clockwise, 2000 is fully clockwise, and 1500 is in the middle.\n\nNote that some manufactures do not follow this standard very closely so that servos often respond to values between 700 and 2300. Feel free to increase these endpoints until the servo no longer continues to increase its range. Note however that attempting to drive a servo past its endpoints (often indicated by a growling sound) is a high-current state, and should be avoided.\n\nContinuous-rotation servos will respond to the writeMicrosecond function in an analogous manner to the write function.\n\n","description":"\nservo.writeMicroseconds(uS)\n\n"}{"name":"\nRead the current angle of the servo (the value passed to the last call to write()).\n\n","description":"\nservo.read()\n\n","syntax":"\nservo: a variable of type Servo\n\n"}{"name":"\nCheck whether the Servo variable is attached to a pin.\n\n","description":"\nservo.attached()\n\n","syntax":"\nservo: a variable of type Servo\n\n"}{"name":"\nWrites a value to the servo, controlling the shaft accordingly.  On a standard servo, this will set the angle of the shaft (in degrees), moving the shaft to that orientation.  On a continuous rotation servo, this will set the speed of the servo (with 0 being full-speed in one direction, 180 being full speed in the other, and a value near 90 being no movement).\n\n","description":"\nservo.write(angle)\n\n"}{"name":"\nDetach the Servo variable from its pin.  If all Servo variables are detached, then pins 9 and 10 can be used for PWM output with analogWrite().\n\n","description":"\nservo.detach()\n\n"}{"name":"\nAttach the Servo variable to a pin.  Note that in Arduino 0016 and earlier, the Servo library supports only servos on only two pins: 9 and 10.\n\n","description":"\nservo.attach(pin) servo.attach(pin, min, max)\n\n"}{"name":"\nRead the current angle of the servo (the value passed to the last call to write()).\n\n","description":"\nservo.read()\n\n","syntax":"\nservo: a variable of type Servo\n\n"}{"name":"\nWrites a value in microseconds (uS) to the servo, controlling the shaft accordingly.  On a standard servo, this will set the angle of the shaft. On standard servos a parameter value of 1000 is fully counter-clockwise, 2000 is fully clockwise, and 1500 is in the middle.\n\nNote that some manufactures do not follow this standard very closely so that servos often respond to values between 700 and 2300. Feel free to increase these endpoints until the servo no longer continues to increase its range. Note however that attempting to drive a servo past its endpoints (often indicated by a growling sound) is a high-current state, and should be avoided.\n\nContinuous-rotation servos will respond to the writeMicrosecond function in an analogous manner to the write function.\n\n","description":"\nservo.writeMicroseconds(uS)\n\n"}{"name":"\nDetach the Servo variable from its pin.  If all Servo variables are detached, then pins 9 and 10 can be used for PWM output with analogWrite().\n\n","description":"\nservo.detach()\n\n"}{"name":"\nWrites a value to the servo, controlling the shaft accordingly.  On a standard servo, this will set the angle of the shaft (in degrees), moving the shaft to that orientation.  On a continuous rotation servo, this will set the speed of the servo (with 0 being full-speed in one direction, 180 being full speed in the other, and a value near 90 being no movement).\n\n","description":"\nservo.write(angle)\n\n"}{"name":"\nCheck whether the Servo variable is attached to a pin.\n\n","description":"\nservo.attached()\n\n","syntax":"\nservo: a variable of type Servo\n\n"}{"name":"\nCheck whether the Servo variable is attached to a pin.\n\n","description":"\nservo.attached()\n\n","syntax":"\nservo: a variable of type Servo\n\n"}{"name":"\nAttach the Servo variable to a pin.  Note that in Arduino 0016 and earlier, the Servo library supports only servos on only two pins: 9 and 10.\n\n","description":"\nservo.attach(pin) servo.attach(pin, min, max)\n\n"}{"name":"\nWrites a value in microseconds (uS) to the servo, controlling the shaft accordingly.  On a standard servo, this will set the angle of the shaft. On standard servos a parameter value of 1000 is fully counter-clockwise, 2000 is fully clockwise, and 1500 is in the middle.\n\nNote that some manufactures do not follow this standard very closely so that servos often respond to values between 700 and 2300. Feel free to increase these endpoints until the servo no longer continues to increase its range. Note however that attempting to drive a servo past its endpoints (often indicated by a growling sound) is a high-current state, and should be avoided.\n\nContinuous-rotation servos will respond to the writeMicrosecond function in an analogous manner to the write function.\n\n","description":"\nservo.writeMicroseconds(uS)\n\n"}{"name":"\nRead the current angle of the servo (the value passed to the last call to write()).\n\n","description":"\nservo.read()\n\n","syntax":"\nservo: a variable of type Servo\n\n"}{"name":"\nWrites a value to the servo, controlling the shaft accordingly.  On a standard servo, this will set the angle of the shaft (in degrees), moving the shaft to that orientation.  On a continuous rotation servo, this will set the speed of the servo (with 0 being full-speed in one direction, 180 being full speed in the other, and a value near 90 being no movement).\n\n","description":"\nservo.write(angle)\n\n"}{"name":"\nDetach the Servo variable from its pin.  If all Servo variables are detached, then pins 9 and 10 can be used for PWM output with analogWrite().\n\n","description":"\nservo.detach()\n\n"}{"name":"\nWrites a value in microseconds (uS) to the servo, controlling the shaft accordingly.  On a standard servo, this will set the angle of the shaft. On standard servos a parameter value of 1000 is fully counter-clockwise, 2000 is fully clockwise, and 1500 is in the middle.\n\nNote that some manufactures do not follow this standard very closely so that servos often respond to values between 700 and 2300. Feel free to increase these endpoints until the servo no longer continues to increase its range. Note however that attempting to drive a servo past its endpoints (often indicated by a growling sound) is a high-current state, and should be avoided.\n\nContinuous-rotation servos will respond to the writeMicrosecond function in an analogous manner to the write function.\n\n","description":"\nservo.writeMicroseconds(uS)\n\n"}{"name":"\nAttach the Servo variable to a pin.  Note that in Arduino 0016 and earlier, the Servo library supports only servos on only two pins: 9 and 10.\n\n","description":"\nservo.attach(pin) servo.attach(pin, min, max)\n\n"}{"name":"\nCheck whether the Servo variable is attached to a pin.\n\n","description":"\nservo.attached()\n\n","syntax":"\nservo: a variable of type Servo\n\n"}{"name":"\nDetach the Servo variable from its pin.  If all Servo variables are detached, then pins 9 and 10 can be used for PWM output with analogWrite().\n\n","description":"\nservo.detach()\n\n"}{"name":"\nRead the current angle of the servo (the value passed to the last call to write()).\n\n","description":"\nservo.read()\n\n","syntax":"\nservo: a variable of type Servo\n\n"}{"name":"\nWrites a value to the servo, controlling the shaft accordingly.  On a standard servo, this will set the angle of the shaft (in degrees), moving the shaft to that orientation.  On a continuous rotation servo, this will set the speed of the servo (with 0 being full-speed in one direction, 180 being full speed in the other, and a value near 90 being no movement).\n\n","description":"\nservo.write(angle)\n\n"}{"name":"\nAttach the Servo variable to a pin.  Note that in Arduino 0016 and earlier, the Servo library supports only servos on only two pins: 9 and 10.\n\n","description":"\nservo.attach(pin) servo.attach(pin, min, max)\n\n"}{"name":"\nCheck whether the Servo variable is attached to a pin.\n\n","description":"\nservo.attached()\n\n","syntax":"\nservo: a variable of type Servo\n\n"}{"name":"\nDetach the Servo variable from its pin.  If all Servo variables are detached, then pins 9 and 10 can be used for PWM output with analogWrite().\n\n","description":"\nservo.detach()\n\n"}{"name":"\nRead the current angle of the servo (the value passed to the last call to write()).\n\n","description":"\nservo.read()\n\n","syntax":"\nservo: a variable of type Servo\n\n"}{"name":"\nWrites a value to the servo, controlling the shaft accordingly.  On a standard servo, this will set the angle of the shaft (in degrees), moving the shaft to that orientation.  On a continuous rotation servo, this will set the speed of the servo (with 0 being full-speed in one direction, 180 being full speed in the other, and a value near 90 being no movement).\n\n","description":"\nservo.write(angle)\n\n"}{"name":"\nWrites a value in microseconds (uS) to the servo, controlling the shaft accordingly.  On a standard servo, this will set the angle of the shaft. On standard servos a parameter value of 1000 is fully counter-clockwise, 2000 is fully clockwise, and 1500 is in the middle.\n\nNote that some manufactures do not follow this standard very closely so that servos often respond to values between 700 and 2300. Feel free to increase these endpoints until the servo no longer continues to increase its range. Note however that attempting to drive a servo past its endpoints (often indicated by a growling sound) is a high-current state, and should be avoided.\n\nContinuous-rotation servos will respond to the writeMicrosecond function in an analogous manner to the write function.\n\n","description":"\nservo.writeMicroseconds(uS)\n\n"}{"name":"\nAttach the Servo variable to a pin.  Note that in Arduino 0016 and earlier, the Servo library supports only servos on only two pins: 9 and 10.\n\n","description":"\nservo.attach(pin) servo.attach(pin, min, max)\n\n"}{"name":"\nWrites a value to the servo, controlling the shaft accordingly.  On a standard servo, this will set the angle of the shaft (in degrees), moving the shaft to that orientation.  On a continuous rotation servo, this will set the speed of the servo (with 0 being full-speed in one direction, 180 being full speed in the other, and a value near 90 being no movement).\n\n","description":"\nservo.write(angle)\n\n"}{"name":"\nCheck whether the Servo variable is attached to a pin.\n\n","description":"\nservo.attached()\n\n","syntax":"\nservo: a variable of type Servo\n\n"}{"name":"\nRead the current angle of the servo (the value passed to the last call to write()).\n\n","description":"\nservo.read()\n\n","syntax":"\nservo: a variable of type Servo\n\n"}{"name":"\nDetach the Servo variable from its pin.  If all Servo variables are detached, then pins 9 and 10 can be used for PWM output with analogWrite().\n\n","description":"\nservo.detach()\n\n"}{"name":"\nWrites a value in microseconds (uS) to the servo, controlling the shaft accordingly.  On a standard servo, this will set the angle of the shaft. On standard servos a parameter value of 1000 is fully counter-clockwise, 2000 is fully clockwise, and 1500 is in the middle.\n\nNote that some manufactures do not follow this standard very closely so that servos often respond to values between 700 and 2300. Feel free to increase these endpoints until the servo no longer continues to increase its range. Note however that attempting to drive a servo past its endpoints (often indicated by a growling sound) is a high-current state, and should be avoided.\n\nContinuous-rotation servos will respond to the writeMicrosecond function in an analogous manner to the write function.\n\n","description":"\nservo.writeMicroseconds(uS)\n\n"}